[build-system]
requires = [
    "setuptools",
    "PySide6>=6.8,<6.9"
]

[project]
name = "cruiz"
description = "Conan recipe user interface"
authors = [
    {name = "Mark Final", email = "markfinal@hotmail.com"},
]
maintainers = [
    {name = "Mark Final", email = "markfinal@hotmail.com"},
]
requires-python = ">=3.9, <3.14"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = [
    "version",
    "dependencies",
    "readme"
]

[project.urls]
Documentation = "https://cruiz.readthedocs.io"
Repository = "https://github.com/markfinal/cruiz"
Issues = "https://github.com/markfinal/cruiz/issues"

[project.gui-scripts]
cruiz = "cruiz.__main__:main"

[tool.setuptools]
packages.find.where = ["src"]
packages.find.include = ["cruiz", "cruiz.*"]
packages.find.exclude = ["cruiz.resources.*"]
include-package-data = false

[tool.setuptools.package-data]
"cruiz" = ["py.typed"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
readme = {file = "README.md", content-type = "text/markdown"}

[tool.mypy]
python_version = "3.10"

# configure variables so that QtPy is used correctly during analysis
always_true = "PYSIDE6"
always_false = ["PYQT5", "PYSIDE2", "PYQT6"]

# exclude generated files
exclude = "/pyside6/"

# display as much information as possible when a warning/error occurs
show_error_context = true
show_column_numbers = true
show_error_code_links = true
show_error_end = true
hide_error_codes = false
pretty = true
color_output = true
error_summary = true
show_absolute_path = true

# prefer strict checks
strict = true

# also more checks for untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# but disable some strict options

# TODO: warn_return_any requires some more work as Any has been used in a few cases of lazyily working out real return types
warn_return_any = false

[[tool.mypy.overrides]]
module = "conan.internal.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "conan.api.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "conans.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "graphviz"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pydevd"
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
# ignore generated code
exclude = "src/cruiz/pyside6"
# F401:imported but unused
per-file-ignores = [
    "__init__.py:F401",
]
extend-select = ["TC", "TC1"] # flake8-type-checking prefer __future__ annotations

[tool.tox]
skipsdist = true
envlist = [
    "lint",
    "test",
]

[tool.tox.pytest]
testpaths = [
    "tests",
]

[tool.tox.env.lint]
deps = [
    "-r{toxinidir}/requirements_dev.txt",
]
commands = [
    ["pip", "install", "-e", "."],
    ["flake8", "src/cruiz"],
    ["flake8", "tests"],
    ["mypy", "src/cruiz"],
    ["mypy", "tests"],
]

[tool.tox.env.test]
deps = [
    "-r{toxinidir}/requirements_dev.txt",
]
commands = [
    ["pip", "install", "-e", "."],
    ["pytest"],
]
